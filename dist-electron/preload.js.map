{"version":3,"file":"preload.js","sources":["../electron/preload.ts"],"sourcesContent":["// The preload is compiled to CommonJS in development/build, so wrap the import\n// logic in a dynamic require which works in both CJS and ESM transpilation.\n(function () {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const { contextBridge, ipcRenderer } = require(\"electron\");\n\n  contextBridge.exposeInMainWorld(\"api\", {\n    onOpenAbout: (handler: () => void) => {\n      const channel = \"open-about\";\n      const wrapped = () => handler();\n      ipcRenderer.on(channel, wrapped);\n      return () => ipcRenderer.removeListener(channel, wrapped);\n    },\n    getAppInfo: async (): Promise<{\n      name: string;\n      version: string;\n      author: string;\n    }> => {\n      return ipcRenderer.invoke(\"app-info\");\n    },\n    selectFolder: async (): Promise<{ folderPath: string } | null> => {\n      return ipcRenderer.invoke(\"select-folder\");\n    },\n    getSavedFolder: async (): Promise<string | null> => {\n      return ipcRenderer.invoke(\"get-saved-folder\");\n    },\n    listDailyTasks: async (): Promise<\n      { fileName: string; fullPath: string }[]\n    > => {\n      return ipcRenderer.invoke(\"list-daily-tasks\");\n    },\n    listTemplates: async (): Promise<\n      { fileName: string; fullPath: string }[]\n    > => {\n      return ipcRenderer.invoke(\"list-templates\");\n    },\n    listBackgrounds: async (): Promise<\n      { fileName: string; fullPath: string; url: string }[]\n    > => {\n      return ipcRenderer.invoke(\"list-backgrounds\");\n    },\n    getBackgroundDataUrl: async (fullPath: string): Promise<string | null> => {\n      return ipcRenderer.invoke(\"get-background-data-url\", fullPath);\n    },\n    readRootSettings: async (): Promise<Record<string, unknown>> => {\n      return ipcRenderer.invoke(\"read-root-settings\");\n    },\n    writeRootSettings: async (\n      partial: Record<string, unknown>\n    ): Promise<boolean> => {\n      return ipcRenderer.invoke(\"write-root-settings\", partial);\n    },\n    readJsonFile: async (fullPath: string): Promise<any | null> => {\n      return ipcRenderer.invoke(\"read-json-file\", fullPath);\n    },\n    writeJsonFile: async (\n      fullPath: string,\n      data: unknown\n    ): Promise<boolean> => {\n      return ipcRenderer.invoke(\"write-json-file\", { fullPath, data });\n    },\n    deleteJsonFile: async (fullPath: string): Promise<boolean> => {\n      return ipcRenderer.invoke(\"delete-json-file\", fullPath);\n    },\n  });\n})();\n"],"names":["contextBridge","ipcRenderer","handler","channel","wrapped","fullPath","partial","data"],"mappings":"CAEC,WAAY;AAEX,QAAM,EAAE,eAAAA,GAAe,aAAAC,MAAgB,QAAQ,UAAU;AAEzD,EAAAD,EAAc,kBAAkB,OAAO;AAAA,IACrC,aAAa,CAACE,MAAwB;AACpC,YAAMC,IAAU,cACVC,IAAU,MAAMF,EAAA;AACtB,aAAAD,EAAY,GAAGE,GAASC,CAAO,GACxB,MAAMH,EAAY,eAAeE,GAASC,CAAO;AAAA,IAC1D;AAAA,IACA,YAAY,YAKHH,EAAY,OAAO,UAAU;AAAA,IAEtC,cAAc,YACLA,EAAY,OAAO,eAAe;AAAA,IAE3C,gBAAgB,YACPA,EAAY,OAAO,kBAAkB;AAAA,IAE9C,gBAAgB,YAGPA,EAAY,OAAO,kBAAkB;AAAA,IAE9C,eAAe,YAGNA,EAAY,OAAO,gBAAgB;AAAA,IAE5C,iBAAiB,YAGRA,EAAY,OAAO,kBAAkB;AAAA,IAE9C,sBAAsB,OAAOI,MACpBJ,EAAY,OAAO,2BAA2BI,CAAQ;AAAA,IAE/D,kBAAkB,YACTJ,EAAY,OAAO,oBAAoB;AAAA,IAEhD,mBAAmB,OACjBK,MAEOL,EAAY,OAAO,uBAAuBK,CAAO;AAAA,IAE1D,cAAc,OAAOD,MACZJ,EAAY,OAAO,kBAAkBI,CAAQ;AAAA,IAEtD,eAAe,OACbA,GACAE,MAEON,EAAY,OAAO,mBAAmB,EAAE,UAAAI,GAAU,MAAAE,GAAM;AAAA,IAEjE,gBAAgB,OAAOF,MACdJ,EAAY,OAAO,oBAAoBI,CAAQ;AAAA,EACxD,CACD;AACH,GAAA;"}