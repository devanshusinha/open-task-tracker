{"version":3,"file":"preload.js","sources":["../electron/preload.ts"],"sourcesContent":["// The preload is compiled to CommonJS in development/build, so wrap the import\n// logic in a dynamic require which works in both CJS and ESM transpilation.\n(function () {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const { contextBridge, ipcRenderer } = require(\"electron\");\n\n  contextBridge.exposeInMainWorld(\"api\", {\n    selectFolder: async (): Promise<{ folderPath: string } | null> => {\n      return ipcRenderer.invoke(\"select-folder\");\n    },\n    getSavedFolder: async (): Promise<string | null> => {\n      return ipcRenderer.invoke(\"get-saved-folder\");\n    },\n    listDailyTasks: async (): Promise<\n      { fileName: string; fullPath: string }[]\n    > => {\n      return ipcRenderer.invoke(\"list-daily-tasks\");\n    },\n    listTemplates: async (): Promise<\n      { fileName: string; fullPath: string }[]\n    > => {\n      return ipcRenderer.invoke(\"list-templates\");\n    },\n    readJsonFile: async (fullPath: string): Promise<any | null> => {\n      return ipcRenderer.invoke(\"read-json-file\", fullPath);\n    },\n    writeJsonFile: async (\n      fullPath: string,\n      data: unknown\n    ): Promise<boolean> => {\n      return ipcRenderer.invoke(\"write-json-file\", { fullPath, data });\n    },\n  });\n})();\n"],"names":[],"mappings":"CAEC,WAAY;AAEX,QAAM,EAAE,eAAe,gBAAgB,QAAQ,UAAU;AAEzD,gBAAc,kBAAkB,OAAO;AAAA,IACrC,cAAc,YAAoD;AAChE,aAAO,YAAY,OAAO,eAAe;AAAA,IAC3C;AAAA,IACA,gBAAgB,YAAoC;AAClD,aAAO,YAAY,OAAO,kBAAkB;AAAA,IAC9C;AAAA,IACA,gBAAgB,YAEX;AACH,aAAO,YAAY,OAAO,kBAAkB;AAAA,IAC9C;AAAA,IACA,eAAe,YAEV;AACH,aAAO,YAAY,OAAO,gBAAgB;AAAA,IAC5C;AAAA,IACA,cAAc,OAAO,aAA0C;AAC7D,aAAO,YAAY,OAAO,kBAAkB,QAAQ;AAAA,IACtD;AAAA,IACA,eAAe,OACb,UACA,SACqB;AACrB,aAAO,YAAY,OAAO,mBAAmB,EAAE,UAAU,MAAM;AAAA,IACjE;AAAA,EAAA,CACD;AACH,GAAA;"}