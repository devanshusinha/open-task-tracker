{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, dialog, ipcMain } from \"electron\";\nimport path from \"node:path\";\nimport fs from \"node:fs\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nlet mainWindow: BrowserWindow | null = null;\n\nfunction createMainWindow() {\n  const iconPathDev = path.join(process.cwd(), \"build\", \"icon.png\");\n\n  // On Windows/Linux, BrowserWindow icon shows in title/taskbar. macOS ignores this and uses app bundle icon.\n  const windowIcon =\n    process.platform === \"win32\" || process.platform === \"linux\"\n      ? iconPathDev\n      : undefined;\n\n  mainWindow = new BrowserWindow({\n    fullscreen: false,\n    backgroundColor: \"#000000\",\n    show: false,\n    icon: windowIcon,\n    // Use hidden inset titleBar on macOS so traffic lights float in content\n    titleBarStyle: process.platform === \"darwin\" ? \"hiddenInset\" : undefined,\n    trafficLightPosition:\n      process.platform === \"darwin\" ? { x: 14, y: 14 } : undefined,\n    webPreferences: {\n      contextIsolation: true,\n      // When running un-packaged (during development), the compiled preload script\n      // lives in the project-root/dist-electron folder. After the app is\n      // packaged the preload will sit next to the compiled main.js inside the\n      // app bundle, so we can reference it directly. Resolve accordingly so\n      // the renderer always gets the preload script and therefore the\n      // window.api bridge.\n      preload: (() => {\n        // Packaged: preload sits next to main.js inside the asar bundle\n        if (app.isPackaged) {\n          return path.join(__dirname, \"preload.js\");\n        }\n\n        // Development: the preload TS gets bundled into dist-electron/preload.js\n        // relative to project root. However depending on whether Electron is\n        // running the built JS or ts-node, __dirname can be either\n        //   - <projectRoot>/electron             (when ts-node executes *.ts)\n        //   - <projectRoot>/dist-electron        (when built JS is executed)\n        // Try both locations and pick the first that exists.\n        const devPath1 = path.join(__dirname, \"../dist-electron/preload.js\");\n        const devPath2 = path.join(__dirname, \"preload.js\");\n        return fs.existsSync(devPath1) ? devPath1 : devPath2;\n      })(),\n    },\n  });\n\n  // Set dock icon on macOS during development\n  if (process.platform === \"darwin\" && !app.isPackaged) {\n    try {\n      app.dock.setIcon(iconPathDev);\n    } catch {}\n  }\n\n  const pageUrl = process.env.VITE_DEV_SERVER_URL;\n  if (pageUrl) {\n    mainWindow.loadURL(pageUrl);\n  } else {\n    mainWindow.loadFile(path.join(__dirname, \"../dist/index.html\"));\n  }\n\n  if (!app.isPackaged) {\n    try {\n      mainWindow.webContents.openDevTools({ mode: \"detach\" });\n    } catch {}\n  }\n\n  // Enable titlebar overlay so the window controls render above the webview\n  if (process.platform === \"darwin\") {\n    try {\n      mainWindow.setTitleBarOverlay({\n        color: \"#00000000\",\n        symbolColor: \"#FFFFFF\",\n        height: 48,\n      });\n    } catch {}\n  }\n\n  mainWindow.once(\"ready-to-show\", () => {\n    mainWindow?.maximize();\n    mainWindow?.show();\n  });\n\n  mainWindow.on(\"closed\", () => {\n    mainWindow = null;\n  });\n}\n\napp.whenReady().then(createMainWindow);\n\n// Simple app-level settings stored under userData\ntype AppSettings = {\n  selectedFolder?: string;\n};\n\nfunction getAppSettingsPath(): string {\n  return path.join(app.getPath(\"userData\"), \"app-settings.json\");\n}\n\nfunction readAppSettings(): AppSettings {\n  try {\n    const filePath = getAppSettingsPath();\n    if (!fs.existsSync(filePath)) return {};\n    const raw = fs.readFileSync(filePath, \"utf-8\");\n    return JSON.parse(raw) as AppSettings;\n  } catch {\n    return {};\n  }\n}\n\nfunction writeAppSettings(settings: AppSettings) {\n  try {\n    const filePath = getAppSettingsPath();\n    fs.mkdirSync(path.dirname(filePath), { recursive: true });\n    fs.writeFileSync(filePath, JSON.stringify(settings, null, 2), \"utf-8\");\n  } catch {\n    // ignore\n  }\n}\n\nasync function ensureFolderStructure(rootFolder: string) {\n  const templatesDir = path.join(rootFolder, \"templates\");\n  const dailyTasksDir = path.join(rootFolder, \"daily tasks\");\n  const settingsFile = path.join(rootFolder, \"settings.json\");\n\n  await fs.promises.mkdir(templatesDir, { recursive: true });\n  await fs.promises.mkdir(dailyTasksDir, { recursive: true });\n\n  try {\n    await fs.promises.access(settingsFile, fs.constants.F_OK);\n  } catch {\n    await fs.promises.writeFile(settingsFile, \"{}\\n\", \"utf-8\");\n  }\n}\n\nipcMain.handle(\"get-saved-folder\", async () => {\n  console.log(\"ipc:get-saved-folder\");\n  const settings = readAppSettings();\n  return settings.selectedFolder ?? null;\n});\n\nipcMain.handle(\"select-folder\", async () => {\n  console.log(\"ipc:select-folder invoked\");\n  if (!mainWindow) return null;\n  const result = await dialog.showOpenDialog(mainWindow, {\n    properties: [\"openDirectory\", \"createDirectory\"],\n  });\n  if (result.canceled || result.filePaths.length === 0) return null;\n  const folderPath = result.filePaths[0];\n\n  try {\n    await ensureFolderStructure(folderPath);\n  } catch {\n    // ignore creation errors but still return selection\n  }\n\n  const current = readAppSettings();\n  writeAppSettings({ ...current, selectedFolder: folderPath });\n  console.log(\"ipc:select-folder selected:\", folderPath);\n  return { folderPath };\n});\n\nipcMain.handle(\"list-daily-tasks\", async () => {\n  const settings = readAppSettings();\n  const rootFolder = settings.selectedFolder;\n  if (!rootFolder) return [] as { fileName: string; fullPath: string }[];\n  const tasksDir = path.join(rootFolder, \"daily tasks\");\n  try {\n    const entries = await fs.promises.readdir(tasksDir, {\n      withFileTypes: true,\n    });\n    const files = entries\n      .filter((e) => e.isFile() && e.name.toLowerCase().endsWith(\".json\"))\n      .map((e) => ({\n        fileName: e.name.replace(/\\.json$/i, \"\"),\n        fullPath: path.join(tasksDir, e.name),\n      }));\n    return files;\n  } catch {\n    return [] as { fileName: string; fullPath: string }[];\n  }\n});\n\nipcMain.handle(\"list-templates\", async () => {\n  const settings = readAppSettings();\n  const rootFolder = settings.selectedFolder;\n  if (!rootFolder) return [] as { fileName: string; fullPath: string }[];\n  const templatesDir = path.join(rootFolder, \"templates\");\n  try {\n    const entries = await fs.promises.readdir(templatesDir, {\n      withFileTypes: true,\n    });\n    const files = entries\n      .filter((e) => e.isFile() && e.name.toLowerCase().endsWith(\".json\"))\n      .map((e) => ({\n        fileName: e.name.replace(/\\.json$/i, \"\"),\n        fullPath: path.join(templatesDir, e.name),\n      }));\n    return files;\n  } catch {\n    return [] as { fileName: string; fullPath: string }[];\n  }\n});\n\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") app.quit();\n});\n\napp.on(\"activate\", () => {\n  if (BrowserWindow.getAllWindows().length === 0) createMainWindow();\n});\n\nipcMain.handle(\"read-json-file\", async (_evt, fullPath: string) => {\n  try {\n    const settings = readAppSettings();\n    const rootFolder = settings.selectedFolder;\n    if (!rootFolder) return null;\n    // Ensure path is within the selected root for safety\n    const resolved = path.resolve(fullPath);\n    const resolvedRoot = path.resolve(rootFolder);\n    if (!resolved.startsWith(resolvedRoot)) return null;\n    if (!resolved.toLowerCase().endsWith(\".json\")) return null;\n    const raw = await fs.promises.readFile(resolved, \"utf-8\");\n    return JSON.parse(raw);\n  } catch {\n    return null;\n  }\n});\n\nipcMain.handle(\n  \"write-json-file\",\n  async (\n    _evt,\n    args: { fullPath: string; data: unknown } | undefined\n  ): Promise<boolean> => {\n    try {\n      if (!args || !args.fullPath) return false;\n      const { fullPath, data } = args;\n      const settings = readAppSettings();\n      const rootFolder = settings.selectedFolder;\n      if (!rootFolder) return false;\n      const resolved = path.resolve(fullPath);\n      const resolvedRoot = path.resolve(rootFolder);\n      if (!resolved.startsWith(resolvedRoot)) return false;\n      if (!resolved.toLowerCase().endsWith(\".json\")) return false;\n      const content = JSON.stringify(data, null, 2) + \"\\n\";\n      await fs.promises.writeFile(resolved, content, \"utf-8\");\n      return true;\n    } catch {\n      return false;\n    }\n  }\n);\n"],"names":[],"mappings":";;;;AAKA,MAAM,YAAY,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAE7D,IAAI,aAAmC;AAEvC,SAAS,mBAAmB;AAC1B,QAAM,cAAc,KAAK,KAAK,QAAQ,IAAA,GAAO,SAAS,UAAU;AAGhE,QAAM,aACJ,QAAQ,aAAa,WAAW,QAAQ,aAAa,UACjD,cACA;AAEN,eAAa,IAAI,cAAc;AAAA,IAC7B,YAAY;AAAA,IACZ,iBAAiB;AAAA,IACjB,MAAM;AAAA,IACN,MAAM;AAAA;AAAA,IAEN,eAAe,QAAQ,aAAa,WAAW,gBAAgB;AAAA,IAC/D,sBACE,QAAQ,aAAa,WAAW,EAAE,GAAG,IAAI,GAAG,GAAA,IAAO;AAAA,IACrD,gBAAgB;AAAA,MACd,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOlB,UAAU,MAAM;AAEd,YAAI,IAAI,YAAY;AAClB,iBAAO,KAAK,KAAK,WAAW,YAAY;AAAA,QAC1C;AAQA,cAAM,WAAW,KAAK,KAAK,WAAW,6BAA6B;AACnE,cAAM,WAAW,KAAK,KAAK,WAAW,YAAY;AAClD,eAAO,GAAG,WAAW,QAAQ,IAAI,WAAW;AAAA,MAC9C,GAAA;AAAA,IAAG;AAAA,EACL,CACD;AAGD,MAAI,QAAQ,aAAa,YAAY,CAAC,IAAI,YAAY;AACpD,QAAI;AACF,UAAI,KAAK,QAAQ,WAAW;AAAA,IAC9B,QAAQ;AAAA,IAAC;AAAA,EACX;AAEA,QAAM,UAAU,QAAA,IAAY;AAC5B,MAAI,SAAS;AACX,eAAW,QAAQ,OAAO;AAAA,EAC5B,OAAO;AACL,eAAW,SAAS,KAAK,KAAK,WAAW,oBAAoB,CAAC;AAAA,EAChE;AAEA,MAAI,CAAC,IAAI,YAAY;AACnB,QAAI;AACF,iBAAW,YAAY,aAAa,EAAE,MAAM,UAAU;AAAA,IACxD,QAAQ;AAAA,IAAC;AAAA,EACX;AAGA,MAAI,QAAQ,aAAa,UAAU;AACjC,QAAI;AACF,iBAAW,mBAAmB;AAAA,QAC5B,OAAO;AAAA,QACP,aAAa;AAAA,QACb,QAAQ;AAAA,MAAA,CACT;AAAA,IACH,QAAQ;AAAA,IAAC;AAAA,EACX;AAEA,aAAW,KAAK,iBAAiB,MAAM;AACrC,gBAAY,SAAA;AACZ,gBAAY,KAAA;AAAA,EACd,CAAC;AAED,aAAW,GAAG,UAAU,MAAM;AAC5B,iBAAa;AAAA,EACf,CAAC;AACH;AAEA,IAAI,UAAA,EAAY,KAAK,gBAAgB;AAOrC,SAAS,qBAA6B;AACpC,SAAO,KAAK,KAAK,IAAI,QAAQ,UAAU,GAAG,mBAAmB;AAC/D;AAEA,SAAS,kBAA+B;AACtC,MAAI;AACF,UAAM,WAAW,mBAAA;AACjB,QAAI,CAAC,GAAG,WAAW,QAAQ,UAAU,CAAA;AACrC,UAAM,MAAM,GAAG,aAAa,UAAU,OAAO;AAC7C,WAAO,KAAK,MAAM,GAAG;AAAA,EACvB,QAAQ;AACN,WAAO,CAAA;AAAA,EACT;AACF;AAEA,SAAS,iBAAiB,UAAuB;AAC/C,MAAI;AACF,UAAM,WAAW,mBAAA;AACjB,OAAG,UAAU,KAAK,QAAQ,QAAQ,GAAG,EAAE,WAAW,MAAM;AACxD,OAAG,cAAc,UAAU,KAAK,UAAU,UAAU,MAAM,CAAC,GAAG,OAAO;AAAA,EACvE,QAAQ;AAAA,EAER;AACF;AAEA,eAAe,sBAAsB,YAAoB;AACvD,QAAM,eAAe,KAAK,KAAK,YAAY,WAAW;AACtD,QAAM,gBAAgB,KAAK,KAAK,YAAY,aAAa;AACzD,QAAM,eAAe,KAAK,KAAK,YAAY,eAAe;AAE1D,QAAM,GAAG,SAAS,MAAM,cAAc,EAAE,WAAW,MAAM;AACzD,QAAM,GAAG,SAAS,MAAM,eAAe,EAAE,WAAW,MAAM;AAE1D,MAAI;AACF,UAAM,GAAG,SAAS,OAAO,cAAc,GAAG,UAAU,IAAI;AAAA,EAC1D,QAAQ;AACN,UAAM,GAAG,SAAS,UAAU,cAAc,QAAQ,OAAO;AAAA,EAC3D;AACF;AAEA,QAAQ,OAAO,oBAAoB,YAAY;AAC7C,UAAQ,IAAI,sBAAsB;AAClC,QAAM,WAAW,gBAAA;AACjB,SAAO,SAAS,kBAAkB;AACpC,CAAC;AAED,QAAQ,OAAO,iBAAiB,YAAY;AAC1C,UAAQ,IAAI,2BAA2B;AACvC,MAAI,CAAC,WAAY,QAAO;AACxB,QAAM,SAAS,MAAM,OAAO,eAAe,YAAY;AAAA,IACrD,YAAY,CAAC,iBAAiB,iBAAiB;AAAA,EAAA,CAChD;AACD,MAAI,OAAO,YAAY,OAAO,UAAU,WAAW,EAAG,QAAO;AAC7D,QAAM,aAAa,OAAO,UAAU,CAAC;AAErC,MAAI;AACF,UAAM,sBAAsB,UAAU;AAAA,EACxC,QAAQ;AAAA,EAER;AAEA,QAAM,UAAU,gBAAA;AAChB,mBAAiB,EAAE,GAAG,SAAS,gBAAgB,YAAY;AAC3D,UAAQ,IAAI,+BAA+B,UAAU;AACrD,SAAO,EAAE,WAAA;AACX,CAAC;AAED,QAAQ,OAAO,oBAAoB,YAAY;AAC7C,QAAM,WAAW,gBAAA;AACjB,QAAM,aAAa,SAAS;AAC5B,MAAI,CAAC,WAAY,QAAO,CAAA;AACxB,QAAM,WAAW,KAAK,KAAK,YAAY,aAAa;AACpD,MAAI;AACF,UAAM,UAAU,MAAM,GAAG,SAAS,QAAQ,UAAU;AAAA,MAClD,eAAe;AAAA,IAAA,CAChB;AACD,UAAM,QAAQ,QACX,OAAO,CAAC,MAAM,EAAE,YAAY,EAAE,KAAK,YAAA,EAAc,SAAS,OAAO,CAAC,EAClE,IAAI,CAAC,OAAO;AAAA,MACX,UAAU,EAAE,KAAK,QAAQ,YAAY,EAAE;AAAA,MACvC,UAAU,KAAK,KAAK,UAAU,EAAE,IAAI;AAAA,IAAA,EACpC;AACJ,WAAO;AAAA,EACT,QAAQ;AACN,WAAO,CAAA;AAAA,EACT;AACF,CAAC;AAED,QAAQ,OAAO,kBAAkB,YAAY;AAC3C,QAAM,WAAW,gBAAA;AACjB,QAAM,aAAa,SAAS;AAC5B,MAAI,CAAC,WAAY,QAAO,CAAA;AACxB,QAAM,eAAe,KAAK,KAAK,YAAY,WAAW;AACtD,MAAI;AACF,UAAM,UAAU,MAAM,GAAG,SAAS,QAAQ,cAAc;AAAA,MACtD,eAAe;AAAA,IAAA,CAChB;AACD,UAAM,QAAQ,QACX,OAAO,CAAC,MAAM,EAAE,YAAY,EAAE,KAAK,YAAA,EAAc,SAAS,OAAO,CAAC,EAClE,IAAI,CAAC,OAAO;AAAA,MACX,UAAU,EAAE,KAAK,QAAQ,YAAY,EAAE;AAAA,MACvC,UAAU,KAAK,KAAK,cAAc,EAAE,IAAI;AAAA,IAAA,EACxC;AACJ,WAAO;AAAA,EACT,QAAQ;AACN,WAAO,CAAA;AAAA,EACT;AACF,CAAC;AAED,IAAI,GAAG,qBAAqB,MAAM;AAChC,MAAI,QAAQ,aAAa,SAAU,KAAI,KAAA;AACzC,CAAC;AAED,IAAI,GAAG,YAAY,MAAM;AACvB,MAAI,cAAc,cAAA,EAAgB,WAAW,EAAG,kBAAA;AAClD,CAAC;AAED,QAAQ,OAAO,kBAAkB,OAAO,MAAM,aAAqB;AACjE,MAAI;AACF,UAAM,WAAW,gBAAA;AACjB,UAAM,aAAa,SAAS;AAC5B,QAAI,CAAC,WAAY,QAAO;AAExB,UAAM,WAAW,KAAK,QAAQ,QAAQ;AACtC,UAAM,eAAe,KAAK,QAAQ,UAAU;AAC5C,QAAI,CAAC,SAAS,WAAW,YAAY,EAAG,QAAO;AAC/C,QAAI,CAAC,SAAS,YAAA,EAAc,SAAS,OAAO,EAAG,QAAO;AACtD,UAAM,MAAM,MAAM,GAAG,SAAS,SAAS,UAAU,OAAO;AACxD,WAAO,KAAK,MAAM,GAAG;AAAA,EACvB,QAAQ;AACN,WAAO;AAAA,EACT;AACF,CAAC;AAED,QAAQ;AAAA,EACN;AAAA,EACA,OACE,MACA,SACqB;AACrB,QAAI;AACF,UAAI,CAAC,QAAQ,CAAC,KAAK,SAAU,QAAO;AACpC,YAAM,EAAE,UAAU,KAAA,IAAS;AAC3B,YAAM,WAAW,gBAAA;AACjB,YAAM,aAAa,SAAS;AAC5B,UAAI,CAAC,WAAY,QAAO;AACxB,YAAM,WAAW,KAAK,QAAQ,QAAQ;AACtC,YAAM,eAAe,KAAK,QAAQ,UAAU;AAC5C,UAAI,CAAC,SAAS,WAAW,YAAY,EAAG,QAAO;AAC/C,UAAI,CAAC,SAAS,YAAA,EAAc,SAAS,OAAO,EAAG,QAAO;AACtD,YAAM,UAAU,KAAK,UAAU,MAAM,MAAM,CAAC,IAAI;AAChD,YAAM,GAAG,SAAS,UAAU,UAAU,SAAS,OAAO;AACtD,aAAO;AAAA,IACT,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AACF;"}