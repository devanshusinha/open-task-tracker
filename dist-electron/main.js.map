{"version":3,"file":"main.js","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, dialog, ipcMain, Menu } from \"electron\";\nimport path from \"node:path\";\nimport fs from \"node:fs\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nlet mainWindow: BrowserWindow | null = null;\n\nfunction createMainWindow() {\n  const iconPathDev = path.join(process.cwd(), \"build\", \"icon.png\");\n\n  // On Windows/Linux, BrowserWindow icon shows in title/taskbar. macOS ignores this and uses app bundle icon.\n  const windowIcon =\n    process.platform === \"win32\" || process.platform === \"linux\"\n      ? iconPathDev\n      : undefined;\n\n  mainWindow = new BrowserWindow({\n    fullscreen: false,\n    backgroundColor: \"#000000\",\n    show: false,\n    icon: windowIcon,\n    // Use hidden inset titleBar on macOS so traffic lights float in content\n    titleBarStyle: process.platform === \"darwin\" ? \"hiddenInset\" : undefined,\n    trafficLightPosition:\n      process.platform === \"darwin\" ? { x: 14, y: 14 } : undefined,\n    webPreferences: {\n      contextIsolation: true,\n      // When running un-packaged (during development), the compiled preload script\n      // lives in the project-root/dist-electron folder. After the app is\n      // packaged the preload will sit next to the compiled main.js inside the\n      // app bundle, so we can reference it directly. Resolve accordingly so\n      // the renderer always gets the preload script and therefore the\n      // window.api bridge.\n      preload: (() => {\n        // Packaged: preload sits next to main.js inside the asar bundle\n        if (app.isPackaged) {\n          return path.join(__dirname, \"preload.js\");\n        }\n\n        // Development: the preload TS gets bundled into dist-electron/preload.js\n        // relative to project root. However depending on whether Electron is\n        // running the built JS or ts-node, __dirname can be either\n        //   - <projectRoot>/electron             (when ts-node executes *.ts)\n        //   - <projectRoot>/dist-electron        (when built JS is executed)\n        // Try both locations and pick the first that exists.\n        const devPath1 = path.join(__dirname, \"../dist-electron/preload.js\");\n        const devPath2 = path.join(__dirname, \"preload.js\");\n        return fs.existsSync(devPath1) ? devPath1 : devPath2;\n      })(),\n    },\n  });\n\n  // Set dock icon on macOS during development\n  if (process.platform === \"darwin\" && !app.isPackaged) {\n    try {\n      app.dock.setIcon(iconPathDev);\n    } catch {}\n  }\n\n  const pageUrl = process.env.VITE_DEV_SERVER_URL;\n  if (pageUrl) {\n    mainWindow.loadURL(pageUrl);\n  } else {\n    mainWindow.loadFile(path.join(__dirname, \"../dist/index.html\"));\n  }\n\n  if (!app.isPackaged) {\n    try {\n      mainWindow.webContents.openDevTools({ mode: \"detach\" });\n    } catch {}\n  }\n\n  // Enable titlebar overlay so the window controls render above the webview\n  if (process.platform === \"darwin\") {\n    try {\n      mainWindow.setTitleBarOverlay({\n        color: \"#00000000\",\n        symbolColor: \"#FFFFFF\",\n        height: 48,\n      });\n    } catch {}\n  }\n\n  mainWindow.once(\"ready-to-show\", () => {\n    mainWindow?.maximize();\n    mainWindow?.show();\n  });\n\n  mainWindow.on(\"closed\", () => {\n    mainWindow = null;\n  });\n}\n\napp.whenReady().then(() => {\n  createMainWindow();\n\n  // macOS custom application menu\n  if (process.platform === \"darwin\") {\n    const appName = \"Open Task Tracker\";\n    const template: Electron.MenuItemConstructorOptions[] = [\n      {\n        label: appName,\n        submenu: [\n          {\n            label: `About ${appName}`,\n            click: () => {\n              try {\n                if (mainWindow) {\n                  mainWindow.webContents.send(\"open-about\");\n                }\n              } catch {}\n            },\n          },\n          { type: \"separator\" },\n          { role: \"services\", submenu: [] },\n          { type: \"separator\" },\n          { role: \"hide\", label: `Hide ${appName}` },\n          { role: \"hideOthers\" },\n          { role: \"unhide\" },\n          { type: \"separator\" },\n          { role: \"quit\", label: `Quit ${appName}` },\n        ],\n      },\n      {\n        label: \"Edit\",\n        submenu: [\n          { role: \"undo\" },\n          { role: \"redo\" },\n          { type: \"separator\" },\n          { role: \"cut\" },\n          { role: \"copy\" },\n          { role: \"paste\" },\n          { role: \"pasteAndMatchStyle\" },\n          { role: \"delete\" },\n          { role: \"selectAll\" },\n        ],\n      },\n      {\n        label: \"View\",\n        submenu: [\n          { role: \"reload\" },\n          { role: \"toggleDevTools\" },\n          { type: \"separator\" },\n          { role: \"resetZoom\" },\n          { role: \"zoomIn\" },\n          { role: \"zoomOut\" },\n          { type: \"separator\" },\n          { role: \"togglefullscreen\" },\n        ],\n      },\n      {\n        label: \"Window\",\n        submenu: [\n          { role: \"minimize\" },\n          { role: \"zoom\" },\n          { type: \"separator\" },\n          { role: \"front\" },\n          { role: \"window\" },\n        ],\n      },\n      {\n        role: \"help\",\n        submenu: [\n          {\n            label: \"Learn More\",\n            click: () => {\n              // no-op placeholder\n            },\n          },\n        ],\n      },\n    ];\n    const menu = Menu.buildFromTemplate(template);\n    Menu.setApplicationMenu(menu);\n  }\n});\n\n// Configure native About panel (macOS) and provide app metadata\napp.setAboutPanelOptions?.({\n  applicationName: \"Open Task Tracker\",\n  applicationVersion: \"0.0.1\",\n  version: \"0.0.1\",\n  authors: [\"Devanshu Sinha\"],\n  copyright: `Â© ${new Date().getFullYear()} Devanshu Sinha`,\n  website: \"\",\n});\n\nipcMain.handle(\"app-info\", async () => {\n  return {\n    name: \"Open Task Tracker\",\n    version: \"0.0.1\",\n    author: \"Devanshu Sinha\",\n  } as const;\n});\n\n// Simple app-level settings stored under userData\ntype AppSettings = {\n  selectedFolder?: string;\n};\n\nfunction getAppSettingsPath(): string {\n  return path.join(app.getPath(\"userData\"), \"app-settings.json\");\n}\n\nfunction readAppSettings(): AppSettings {\n  try {\n    const filePath = getAppSettingsPath();\n    if (!fs.existsSync(filePath)) return {};\n    const raw = fs.readFileSync(filePath, \"utf-8\");\n    return JSON.parse(raw) as AppSettings;\n  } catch {\n    return {};\n  }\n}\n\nfunction writeAppSettings(settings: AppSettings) {\n  try {\n    const filePath = getAppSettingsPath();\n    fs.mkdirSync(path.dirname(filePath), { recursive: true });\n    fs.writeFileSync(filePath, JSON.stringify(settings, null, 2), \"utf-8\");\n  } catch {\n    // ignore\n  }\n}\n\nasync function ensureFolderStructure(rootFolder: string) {\n  const templatesDir = path.join(rootFolder, \"templates\");\n  const dailyTasksDir = path.join(rootFolder, \"daily tasks\");\n  const backgroundsDir = path.join(rootFolder, \"backgrounds\");\n  const settingsFile = path.join(rootFolder, \"settings.json\");\n\n  await fs.promises.mkdir(templatesDir, { recursive: true });\n  await fs.promises.mkdir(dailyTasksDir, { recursive: true });\n  await fs.promises.mkdir(backgroundsDir, { recursive: true });\n\n  try {\n    await fs.promises.access(settingsFile, fs.constants.F_OK);\n  } catch {\n    await fs.promises.writeFile(settingsFile, \"{}\\n\", \"utf-8\");\n  }\n}\n\nipcMain.handle(\"get-saved-folder\", async () => {\n  console.log(\"ipc:get-saved-folder\");\n  const settings = readAppSettings();\n  return settings.selectedFolder ?? null;\n});\n\nipcMain.handle(\"select-folder\", async () => {\n  console.log(\"ipc:select-folder invoked\");\n  if (!mainWindow) return null;\n  const result = await dialog.showOpenDialog(mainWindow, {\n    properties: [\"openDirectory\", \"createDirectory\"],\n  });\n  if (result.canceled || result.filePaths.length === 0) return null;\n  const folderPath = result.filePaths[0];\n\n  try {\n    await ensureFolderStructure(folderPath);\n  } catch {\n    // ignore creation errors but still return selection\n  }\n\n  const current = readAppSettings();\n  writeAppSettings({ ...current, selectedFolder: folderPath });\n  console.log(\"ipc:select-folder selected:\", folderPath);\n  return { folderPath };\n});\n\nipcMain.handle(\"list-daily-tasks\", async () => {\n  const settings = readAppSettings();\n  const rootFolder = settings.selectedFolder;\n  if (!rootFolder) return [] as { fileName: string; fullPath: string }[];\n  const tasksDir = path.join(rootFolder, \"daily tasks\");\n  try {\n    const entries = await fs.promises.readdir(tasksDir, {\n      withFileTypes: true,\n    });\n    const files = entries\n      .filter((e) => e.isFile() && e.name.toLowerCase().endsWith(\".json\"))\n      .map((e) => ({\n        fileName: e.name.replace(/\\.json$/i, \"\"),\n        fullPath: path.join(tasksDir, e.name),\n      }));\n    return files;\n  } catch {\n    return [] as { fileName: string; fullPath: string }[];\n  }\n});\n\nipcMain.handle(\"list-templates\", async () => {\n  const settings = readAppSettings();\n  const rootFolder = settings.selectedFolder;\n  if (!rootFolder) return [] as { fileName: string; fullPath: string }[];\n  const templatesDir = path.join(rootFolder, \"templates\");\n  try {\n    const entries = await fs.promises.readdir(templatesDir, {\n      withFileTypes: true,\n    });\n    const files = entries\n      .filter((e) => e.isFile() && e.name.toLowerCase().endsWith(\".json\"))\n      .map((e) => ({\n        fileName: e.name.replace(/\\.json$/i, \"\"),\n        fullPath: path.join(templatesDir, e.name),\n      }));\n    return files;\n  } catch {\n    return [] as { fileName: string; fullPath: string }[];\n  }\n});\n\nipcMain.handle(\"list-backgrounds\", async () => {\n  const settings = readAppSettings();\n  const rootFolder = settings.selectedFolder;\n  if (!rootFolder)\n    return [] as { fileName: string; fullPath: string; url: string }[];\n  const backgroundsDir = path.join(rootFolder, \"backgrounds\");\n  try {\n    const entries = await fs.promises.readdir(backgroundsDir, {\n      withFileTypes: true,\n    });\n    const exts = [\".png\", \".jpg\", \".jpeg\", \".gif\", \".webp\", \".svg\"];\n    const filePaths = entries\n      .filter(\n        (e) => e.isFile() && exts.includes(path.extname(e.name).toLowerCase())\n      )\n      .map((e) => path.join(backgroundsDir, e.name));\n\n    const results = await Promise.all(\n      filePaths.map(async (fullPath) => {\n        try {\n          const buf = await fs.promises.readFile(fullPath);\n          const ext = path.extname(fullPath).toLowerCase();\n          const mime =\n            ext === \".png\"\n              ? \"image/png\"\n              : ext === \".gif\"\n                ? \"image/gif\"\n                : ext === \".webp\"\n                  ? \"image/webp\"\n                  : ext === \".svg\"\n                    ? \"image/svg+xml\"\n                    : \"image/jpeg\";\n          const b64 = buf.toString(\"base64\");\n          const url = `data:${mime};base64,${b64}`;\n          return { fileName: path.basename(fullPath), fullPath, url };\n        } catch {\n          return { fileName: path.basename(fullPath), fullPath, url: \"\" };\n        }\n      })\n    );\n    return results;\n  } catch {\n    return [] as { fileName: string; fullPath: string; url: string }[];\n  }\n});\n\nipcMain.handle(\"get-background-data-url\", async (_evt, fullPath: string) => {\n  try {\n    const settings = readAppSettings();\n    const rootFolder = settings.selectedFolder;\n    if (!rootFolder) return null;\n    const resolved = path.resolve(fullPath);\n    const resolvedRoot = path.resolve(rootFolder);\n    if (!resolved.startsWith(resolvedRoot)) return null;\n    const ext = path.extname(resolved).toLowerCase();\n    const allowed = [\".png\", \".jpg\", \".jpeg\", \".gif\", \".webp\", \".svg\"];\n    if (!allowed.includes(ext)) return null;\n    const buf = await fs.promises.readFile(resolved);\n    const mime =\n      ext === \".png\"\n        ? \"image/png\"\n        : ext === \".gif\"\n          ? \"image/gif\"\n          : ext === \".webp\"\n            ? \"image/webp\"\n            : ext === \".svg\"\n              ? \"image/svg+xml\"\n              : \"image/jpeg\";\n    const b64 = buf.toString(\"base64\");\n    return `data:${mime};base64,${b64}`;\n  } catch {\n    return null;\n  }\n});\n\n// Read settings.json stored inside the currently selected root folder\nipcMain.handle(\"read-root-settings\", async () => {\n  try {\n    const settings = readAppSettings();\n    const rootFolder = settings.selectedFolder;\n    if (!rootFolder) return {} as Record<string, unknown>;\n    const settingsFile = path.join(rootFolder, \"settings.json\");\n    try {\n      const raw = await fs.promises.readFile(settingsFile, \"utf-8\");\n      return JSON.parse(raw) as Record<string, unknown>;\n    } catch {\n      return {} as Record<string, unknown>;\n    }\n  } catch {\n    return {} as Record<string, unknown>;\n  }\n});\n\n// Merge and write settings.json inside the currently selected root folder\nipcMain.handle(\n  \"write-root-settings\",\n  async (\n    _evt,\n    partial: Record<string, unknown> | undefined\n  ): Promise<boolean> => {\n    try {\n      const settings = readAppSettings();\n      const rootFolder = settings.selectedFolder;\n      if (!rootFolder) return false;\n      const settingsFile = path.join(rootFolder, \"settings.json\");\n      let current: Record<string, unknown> = {};\n      try {\n        const raw = await fs.promises.readFile(settingsFile, \"utf-8\");\n        current = JSON.parse(raw) as Record<string, unknown>;\n      } catch {\n        current = {};\n      }\n      const next = { ...current, ...(partial ?? {}) };\n      const content = JSON.stringify(next, null, 2) + \"\\n\";\n      await fs.promises.writeFile(settingsFile, content, \"utf-8\");\n      return true;\n    } catch {\n      return false;\n    }\n  }\n);\n\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") app.quit();\n});\n\napp.on(\"activate\", () => {\n  if (BrowserWindow.getAllWindows().length === 0) createMainWindow();\n});\n\nipcMain.handle(\"read-json-file\", async (_evt, fullPath: string) => {\n  try {\n    const settings = readAppSettings();\n    const rootFolder = settings.selectedFolder;\n    if (!rootFolder) return null;\n    // Ensure path is within the selected root for safety\n    const resolved = path.resolve(fullPath);\n    const resolvedRoot = path.resolve(rootFolder);\n    if (!resolved.startsWith(resolvedRoot)) return null;\n    if (!resolved.toLowerCase().endsWith(\".json\")) return null;\n    const raw = await fs.promises.readFile(resolved, \"utf-8\");\n    return JSON.parse(raw);\n  } catch {\n    return null;\n  }\n});\n\nipcMain.handle(\n  \"write-json-file\",\n  async (\n    _evt,\n    args: { fullPath: string; data: unknown } | undefined\n  ): Promise<boolean> => {\n    try {\n      if (!args || !args.fullPath) return false;\n      const { fullPath, data } = args;\n      const settings = readAppSettings();\n      const rootFolder = settings.selectedFolder;\n      if (!rootFolder) return false;\n      const resolved = path.resolve(fullPath);\n      const resolvedRoot = path.resolve(rootFolder);\n      if (!resolved.startsWith(resolvedRoot)) return false;\n      if (!resolved.toLowerCase().endsWith(\".json\")) return false;\n      const content = JSON.stringify(data, null, 2) + \"\\n\";\n      await fs.promises.writeFile(resolved, content, \"utf-8\");\n      return true;\n    } catch {\n      return false;\n    }\n  }\n);\n\nipcMain.handle(\"delete-json-file\", async (_evt, fullPath: string) => {\n  try {\n    const settings = readAppSettings();\n    const rootFolder = settings.selectedFolder;\n    if (!rootFolder) return false;\n    const resolved = path.resolve(fullPath);\n    const resolvedRoot = path.resolve(rootFolder);\n    if (!resolved.startsWith(resolvedRoot)) return false;\n    if (!resolved.toLowerCase().endsWith(\".json\")) return false;\n    await fs.promises.unlink(resolved);\n    return true;\n  } catch {\n    return false;\n  }\n});\n"],"names":["__dirname","path","fileURLToPath","mainWindow","createMainWindow","iconPathDev","windowIcon","BrowserWindow","app","devPath1","devPath2","fs","pageUrl","appName","template","menu","Menu","ipcMain","getAppSettingsPath","readAppSettings","filePath","raw","writeAppSettings","settings","ensureFolderStructure","rootFolder","templatesDir","dailyTasksDir","backgroundsDir","settingsFile","result","dialog","folderPath","current","tasksDir","e","entries","exts","filePaths","fullPath","buf","ext","mime","b64","url","_evt","resolved","resolvedRoot","partial","next","content","args","data"],"mappings":"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"}